// This file is automatically generated at startup. Do not modify.
import { genericFetch } from "./api_base";
export async function module(input: string): Promise<ModuleResponse> {
  return (await genericFetch(
    "http://localhost:8080/module",
    input
  )) as ModuleResponse;
}
export async function index(input: void): Promise<string> {
  return (await genericFetch("http://localhost:8080/", input)) as string;
}
export type RegistrationEnum =
  | { type: "Submenu"; Submenu: ModuleMenu[] }
  | { type: "Modules"; Modules: Module[] };

export async function search_module(input: string): Promise<SearchResult[]> {
  return (await genericFetch(
    "http://localhost:8080/search-module",
    input
  )) as SearchResult[];
}
export type Module = {
  tucan_id: string;
  tucan_last_checked: string;
  title: string;
  module_id: string;
  credits: number | undefined;
  content: string;
  done: boolean;
};
export async function login(input: Login): Promise<LoginResult> {
  return (await genericFetch(
    "http://localhost:8080/login",
    input
  )) as LoginResult;
}
export type ModuleResponse = {
  module: Module;
  path: ModuleMenuPathPart[][];
};
export type Login = {
  username: string;
  password: string;
};
export async function course(input: string): Promise<Course> {
  return (await genericFetch("http://localhost:8080/course", input)) as Course;
}
export type ModuleMenuPathPart = {
  parent: number[] | undefined;
  tucan_id: string;
  name: string;
  leaf: boolean;
};
export type SearchResult = {
  tucan_id: string;
  title: string;
  excerpt: string;
  rank: number;
};
export type ModuleMenu = {
  tucan_id: string;
  tucan_last_checked: string;
  name: string;
  child_type: number;
  parent: string;
};
export type ModuleMenuResponse = {
  module_menu: ModuleMenu;
  entries: RegistrationEnum;
  path: ModuleMenuPathPart[][];
};
export async function search_course(input: string): Promise<SearchResult[]> {
  return (await genericFetch(
    "http://localhost:8080/search-course",
    input
  )) as SearchResult[];
}
export async function logout(input: void): Promise<void> {
  return (await genericFetch("http://localhost:8080/logout", input)) as void;
}
export type LoginResult = {
  success: boolean;
};
export async function get_modules(input: string): Promise<ModuleMenuResponse> {
  return (await genericFetch(
    "http://localhost:8080/modules",
    input
  )) as ModuleMenuResponse;
}
export type Course = {
  tucan_id: string;
  tucan_last_checked: string;
  title: string;
  course_id: string;
  sws: number;
  content: string;
  done: boolean;
};
